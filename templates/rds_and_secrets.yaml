AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description:  > 
  Template builds a private webserver instance, a bastion host, a database, an application load balancer, and an autoscaling group for the webserver. 
  A simple index.html file is downloaded from an S3 bucket into the webserver upon webserver creation. The template also sets up a username and 
  password in AWS Secrets Manager, so no secrets are stored in your code base. 

Parameters:
  VPCStackName:
    Description: Name of parent stack
    Type: String
  DBMonitoringInSeconds:
    Description: The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
    Type: Number
    Default: 60
  DaysDBBackupsStored:
    Description: > 
      The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. 
      Setting this parameter to 0 disables automated backups.
    Type: Number
    Default: 7
  DBStorageType:
    Description: > 
      Specifies the storage type to be associated with the DB instance. General Purpose SSD storage offers cost-effective storage 
      that is acceptable for most database workloads.
    Type: String
    Default: gp2
  DBAllocatedStorage:
    Description: The amount of storage, in gigabytes, to be initially allocated for the database instance.
    Type: String 
    Default: '20'
  DBInstanceIdentifierAddOn:
    Description: An identifier for the DB instance. Note that this is different from the DB name.
    Type: String
    Default: postgresql-instance
  DBName:
    Description: >
      The name of the database to create when the DB instance is created. Used to connect with the DB via the command line 
      using PostgreSQL.
    ConstraintDescription: Must contain 1 to 63 letters, numbers, or underscores (no hyphens); and begin a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).
    Type: String
    Default: my_database

Resources: 
  # =========== Security Groups ===========
  SecurityGroupPrivateOne: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SecurityGroupPrivateOne
      GroupDescription: A security group that was built for a private subnet within the starter-template-vpc
      VpcId: 
        Fn::ImportValue:
          !Sub "${VPCStackName}-vpc-id"
      Tags:
        - Key: Name
          Value: sg-for-private-subnet

  SecurityGroupForDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2SecurityGroupForDB
      GroupDescription: Security group that is used for SecurityGroupDatabase with ingress rules for postgresql
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt SecurityGroupPrivateOne.GroupId 
      VpcId: 
        Fn::ImportValue:
          !Sub "${VPCStackName}-vpc-id"
      Tags:
        - Key: Owner
          Value: sharina
        - Key: Name
          Value: DB-security-group-from-template

  # =========== RDS PostgreSQL DB ===========
  RDSSubnetGroup:
  # RDS uses the DB subnet group and your preferred AZ to choose a subnet and an IP address within that subnet to assign to your DB instance.
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: subnets-for-cf-built-db
      SubnetIds:
        - Fn::ImportValue: !Sub "${VPCStackName}-private-az-a-subnet" 
        - Fn::ImportValue: !Sub "${VPCStackName}-private-az-b-subnet" 
        - Fn::ImportValue: !Sub "${VPCStackName}-private-az-c-subnet" 
      Tags:
        - Key: owner
          Value: sharina
  RDSPostgreSQLInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: !Ref DBAllocatedStorage
      BackupRetentionPeriod: !Ref DaysDBBackupsStored
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Join ['-', [!Ref 'AWS::StackName', !Ref DBInstanceIdentifierAddOn]]
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DeleteAutomatedBackups: true 
      Engine: postgres
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceSecrets, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceSecrets, ':SecretString:password}}' ]]
      MonitoringInterval: !Ref DBMonitoringInSeconds
      MultiAZ: true
      StorageType: !Ref DBStorageType
      VPCSecurityGroups: 
        - !Ref SecurityGroupForDB

  # =========== Secrets Manager ===========
  RDSInstanceSecrets: # creates a username (update 'my-username' to suit your needs) and a randomly generated password. 
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secrets for PostgreSQL RDS instance made from cloudformation template
      Name: !Join ['-', [!Ref 'AWS::StackName', secret]]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "my-username"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: owner
          Value: sharina
                