AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description:  Template builds a private webserver instance, a bastion host, a database, an application load balancer, and an autoscaling group for the webserver.  A simple index.html file is downloaded from an S3 bucket into the webserver upon webserver creation. The template also builds a Secrets Manager, and uses a Lambda function in a pre-built S3 bucket to enable rotation of the secret. 

Parameters:
  KeyName: 
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server.
    Type: AWS::EC2::KeyPair::KeyName 
  VPCStackName:
    Description: Name of parent stack
    Type: String

Resources: 
  # =========== Security Groups ===========
  SecurityGroupPrivateOne: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SecurityGroupPrivateOne
      GroupDescription: A security group that was built for a private subnet within the starter-template-vpc
      VpcId: 
        Fn::ImportValue:
          !Sub "${VPCStackName}-vpc-id"
      Tags:
        - Key: Name
          Value: sg-for-private-subnet

  SecurityGroupForDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2SecurityGroupForDB
      GroupDescription: Security group that is used for SecurityGroupDatabase with ingress rules for postgresql
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt SecurityGroupPrivateOne.GroupId 
      VpcId: 
        Fn::ImportValue:
          !Sub "${VPCStackName}-vpc-id"
      Tags:
        - Key: Owner
          Value: sharina
        - Key: Name
          Value: DB-security-group-from-template

  # =========== RDS PostgreSQL DB ===========
  RDSSubnetGroup:
   # RDS uses the DB subnet group and your preferred AZ to choose a subnet and an IP address within that subnet to assign to your DB instance.
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: subnets-for-cf-built-db
      SubnetIds:
        - Fn::ImportValue: !Sub "${VPCStackName}-private-az-a-subnet" 
        - Fn::ImportValue: !Sub "${VPCStackName}-private-az-b-subnet" 
        - Fn::ImportValue: !Sub "${VPCStackName}-private-az-c-subnet" 
      Tags:
        - Key: owner
          Value: sharina
  RDSPostgreSQLInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: !Ref DBAllocatedStorage
      BackupRetentionPeriod: !Ref DaysDBBackupsStored
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Join ['-', [!Ref 'AWS::StackName', !Ref DBInstanceIdentifierAddOn]]
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DeleteAutomatedBackups: true 
      Engine: postgres
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceSecrets, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceSecrets, ':SecretString:password}}' ]]
      MonitoringInterval: !Ref DBMonitoringInSeconds
      MonitoringRoleArn: !Ref AllowEnhancedMonitoring
      MultiAZ: true
      StorageType: !Ref DBStorageType
      VPCSecurityGroups: 
        - !Ref SecurityGroupForDB

  # =========== Secrets Manager ===========
  RDSInstanceSecrets: # creates a username and a randomly generated password. 
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secrets for PostgreSQL RDS instance made from cloudformation template
      Name: !Join ['-', [!Ref 'AWS::StackName', secret]]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "sharinas"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: owner
          Value: sharina

  # This is required to enable rotation. 
  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSInstanceSecrets
      TargetId: !Ref RDSPostgreSQLInstance
      TargetType: AWS::RDS::DBInstance

  MySecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretRDSInstanceAttachment
    Properties:
      SecretId: !Ref RDSInstanceSecrets
      RotationLambdaARN: !GetAtt MyRotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  # This assumes that the lambda code, secrets_rotation_lambda.py.zip, 
  # has been uploaded to a S3 bucket, and that it will rotate a PostgresQL database password
  MyRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Description: 'This is a lambda to rotate Postgres user passwd'
      FunctionName: !Join ['-', [!Ref 'AWS::StackName', lambda]]
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
      Code:
        S3Bucket: sharina-secrets-rotation-lambda # bucket created prior
        S3Key: secrets_rotation_lambda.py.zip
        # S3ObjectVersion: <% lambda-zip-file-version-if-s3-bucket-versioning-is-enabled %>
  
  #This is a lambda Permission resource which grants Secrets Manager permission to invoke the rotation lambda function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: MyRotationLambda
    Properties:
      FunctionName: !Join ['-', [!Ref 'AWS::StackName', lambda]]
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com
  
  #This is the IAM Role resource for the rotation lambda - it grants permissions to the lambda to get and update the secret as part of the
  #rotation process. This includes required KMS permissions and permissions needed for logging to CloudWatch.
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'AWS::StackName', lambda]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "AWSSecretsManagerRotationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:UpdateSecretVersionStage"
                Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
                Condition:
                  StringEquals:
                    secretsmanager:resource/AllowRotationLambdaArn: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-rotation-lambda'
              -
                Effect: "Allow"
                Action:
                  - "secretsmanager:GetRandomPassword"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:GenerateDataKey"
                Resource: "*"